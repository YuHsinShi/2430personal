/*
 * mpeg audio layer 2 tables. Most of them come from the mpeg audio
 * specification.
 *
 * Copyright (c) 2000, 2001 Fabrice Bellard
 *
 * This file is part of FFmpeg.
 *
 * FFmpeg is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * FFmpeg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with FFmpeg; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

/**
 * @file
 * mpeg audio layer 2 tables.
 * Most of them come from the mpeg audio specification.
 */

#ifndef AVCODEC_MPEGAUDIOTAB_H
#define AVCODEC_MPEGAUDIOTAB_H

//#include "config.h"
#include "mpegaudio.h"

#define SQRT2 1.41421356237309514547

static const int costab32[30] = {
    FIX(0.54119610014619701222),
    FIX(1.3065629648763763537),

    FIX(0.50979557910415917998),
    FIX(2.5629154477415054814),
    FIX(0.89997622313641556513),
    FIX(0.60134488693504528634),

    FIX(0.5024192861881556782),
    FIX(5.1011486186891552563),
    FIX(0.78815462345125020249),
    FIX(0.64682178335999007679),
    FIX(0.56694403481635768927),
    FIX(1.0606776859903470633),
    FIX(1.7224470982383341955),
    FIX(0.52249861493968885462),

    FIX(10.19000812354803287),
    FIX(0.674808341455005678),
    FIX(1.1694399334328846596),
    FIX(0.53104259108978413284),
    FIX(2.0577810099534108446),
    FIX(0.58293496820613388554),
    FIX(0.83934964541552681272),
    FIX(0.50547095989754364798),
    FIX(3.4076084184687189804),
    FIX(0.62250412303566482475),
    FIX(0.97256823786196078263),
    FIX(0.51544730992262455249),
    FIX(1.4841646163141661852),
    FIX(0.5531038960344445421),
    FIX(0.74453627100229857749),
    FIX(0.5006029982351962726),
};

static const int bitinv32[32] = {
    0,  16,  8, 24,  4,  20,  12,  28,
    2,  18, 10, 26,  6,  22,  14,  30,
    1,  17,  9, 25,  5,  21,  13,  29,
    3,  19, 11, 27,  7,  23,  15,  31
};

#ifdef LOOKUP_TABLE
static int16_t filter_bank[512] = {
0,0,0,0,0,0,0,0,0,0,0,
-1,-1,-1,-1,-1,-1,-1,-2,-2,-2,
-2,-2,-3,-3,-3,-4,-4,-5,-5,-6,
-6,-7,-8,-9,-9,-10,-11,-12,-13,-14,
-16,-17,-18,-20,-21,-23,-24,-26,-28,-29,
-31,-33,-35,-37,-38,-40,-42,-44,-46,-47,
-49,-50,-52,53,55,56,56,57,57,57,
57,56,55,54,52,50,47,44,41,37,
32,27,21,14,7,0,-9,-18,-28,-38,
-49,-61,-73,-87,-100,-115,-130,-145,-161,-178,
-195,-212,-230,-248,-266,-284,-302,-321,-339,-357,
-374,-392,-408,-424,-440,-454,-467,-480,-490,-500,
-508,-514,-519,-521,-522,-520,-516,509,500,488,
473,456,435,411,384,354,320,283,243,199,
151,101,46,-11,-72,-136,-203,-274,-347,-423,
-501,-582,-666,-751,-838,-926,-1016,-1106,-1197,-1288,
-1379,-1470,-1559,-1647,-1734,-1818,-1899,-1977,-2052,-2123,
-2189,-2249,-2305,-2354,-2396,-2432,-2459,-2479,-2490,-2491,
-2484,-2466,-2437,-2398,-2347,-2285,-2210,-2123,-2023,-1910,
-1783,1644,1490,1322,1140,944,734,509,271,18,
-249,-530,-825,-1133,-1454,-1788,-2135,-2494,-2864,-3245,
-3637,-4039,-4450,-4869,-5297,-5732,-6173,-6620,-7072,-7528,
-7987,-8448,-8910,-9372,-9834,-10294,-10751,-11205,-11654,-12097,
-12534,-12963,-13383,-13794,-14194,-14583,-14959,-15322,-15671,-16005,
-16322,-16623,-16907,-17173,-17420,-17647,-17855,-18042,-18209,-18354,
-18477,-18578,-18657,-18714,-18748,18760,18748,18714,18657,18578,
18477,18354,18209,18042,17855,17647,17420,17173,16907,16623,
16322,16005,15671,15322,14959,14583,14194,13794,13383,12963,
12534,12097,11654,11205,10751,10294,9834,9372,8910,8448,
7987,7528,7072,6620,6173,5732,5297,4869,4450,4039,
3637,3245,2864,2494,2135,1788,1454,1133,825,530,
249,-18,-271,-509,-734,-944,-1140,-1322,-1490,1644,
1783,1910,2023,2123,2210,2285,2347,2398,2437,2466,
2484,2491,2490,2479,2459,2432,2396,2354,2305,2249,
2189,2123,2052,1977,1899,1818,1734,1647,1559,1470,
1379,1288,1197,1106,1016,926,838,751,666,582,
501,423,347,274,203,136,72,11,-46,-101,
-151,-199,-243,-283,-320,-354,-384,-411,-435,-456,
-473,-488,-500,509,516,520,522,521,519,514,
508,500,490,480,467,454,440,424,408,392,
374,357,339,321,302,284,266,248,230,212,
195,178,161,145,130,115,100,87,73,61,
49,38,28,18,9,0,-7,-14,-21,-27,
-32,-37,-41,-44,-47,-50,-52,-54,-55,-56,
-57,-57,-57,-57,-56,-56,-55,53,52,50,
49,47,46,44,42,40,38,37,35,33,
31,29,28,26,24,23,21,20,18,17,
16,14,13,12,11,10,9,9,8,7,
6,6,5,5,4,4,3,3,3,2,
2,2,2,2,1,1,1,1,1,1,
1,0,0,0,0,0,0,0,0,0,0
};
#else
static int16_t filter_bank[512];
#endif

#ifdef LOOKUP_TABLE
static int scale_factor_table[64]={
2097152,1664510,1321122,1048576,832255,660561,524288,416127,330280,262144,208063,
165140,131072,104031,82570,65536,52015,41285,32768,26007,20642,
16384,13003,10321,8192,6501,5160,4096,3250,2580,2048,
1625,1290,1024,812,645,512,406,322,256,203,
161,128,101,80,64,50,40,32,25,20,
16,12,10,8,6,5,4,3,2,2,1,1,1
};
#else
static int scale_factor_table[64];
#endif

#ifdef USE_FLOATS    
static float scale_factor_inv_table[64];
#else
    #ifdef LOOKUP_TABLE
    static int8_t scale_factor_shift[64]={
    6,6,6,5,5,5,4,4,4,3,3,
    3,2,2,2,1,1,1,0,0,0,
    -1,-1,-1,-2,-2,-2,-3,-3,-3,-4,
    -4,-4,-5,-5,-5,-6,-6,-6,-7,-7,
    -7,-8,-8,-8,-9,-9,-9,-10,-10,-10,
    -11,-11,-11,-12,-12,-12,-13,-13,-13,-14,
    -14,-14,-15
    };
    static unsigned short scale_factor_mult[64]={
    32768,41285,52015,32768,41285,52015,32768,41285,52015,32768,41285,
    52015,32768,41285,52015,32768,41285,52015,32768,41285,52015,
    32768,41285,52015,32768,41285,52015,32768,41285,52015,32768,
    41285,52015,32768,41285,52015,32768,41285,52015,32768,41285,
    52015,32768,41285,52015,32768,41285,52015,32768,41285,52015,
    32768,41285,52015,32768,41285,52015,32768,41285,52015,32768,
    41285,52015,32768        
    };
    #else
    static int8_t scale_factor_shift[64];
    static unsigned short scale_factor_mult[64];
    #endif

#endif

#ifdef LOOKUP_TABLE
static unsigned char scale_diff_table[128]={
0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,1,1,2,3,3,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4
};
#else
static unsigned char scale_diff_table[128];
#endif

/* total number of bits per allocation group */
#ifdef LOOKUP_TABLE
static unsigned short total_quant_bits[17]={
60,84,108,120,144,180,216,252,288,324,360,
396,432,468,504,540,576
};
#else
static unsigned short total_quant_bits[17];
#endif

/* signal to noise ratio of each quantification step (could be
   computed from quant_steps[]). The values are dB multiplied by 10
*/
static const unsigned short quant_snr[17] = {
     70, 110, 160, 208,
    253, 316, 378, 439,
    499, 559, 620, 680,
    740, 800, 861, 920,
    980
};

/* fixed psycho acoustic model. Values of SNR taken from the 'toolame'
   project */
static const float fixed_smr[SBLIMIT] =  {
    30, 17, 16, 10, 3, 12, 8, 2.5,
    5, 5, 6, 6, 5, 6, 10, 6,
    -4, -10, -21, -30, -42, -55, -68, -75,
    -75, -75, -75, -75, -91, -107, -110, -108
};

static const unsigned char nb_scale_factors[4] = { 3, 2, 1, 2 };

#endif /* AVCODEC_MPEGAUDIOTAB_H */
