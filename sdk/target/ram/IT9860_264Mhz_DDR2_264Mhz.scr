// Updated date : 2020/06/19
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// WRITE        ADDRESS(32bits) DATA(32bits)  ByteEnable(4bits) :write data to address                          //
// READ         ADDRESS(32bits) DATA(32bits)  BitEnable(32bits) :read address,and then compare with data        //
// WAIT         ADDRESS(32bits) DATA(32bits)  BitEnable(32bits) :read address until equal to data               //
// INITFILE     FILENAME                                        :write file to address(@address in the file)    //
// INITBFILE    ADDRESS(32bits) FILENAME(bin)                   :write file to address                          //
// DUMP         ADDRESS(32bits) FILENAME      SIZE(byte)        :read address,then write to file                //
// DUMPB        ADDRESS(32bits) FILENAME(bin) SIZE(byte)        :read address,then write to file                //
// WAIT         TIME(us)                                        :host model sleep                               //
// END                                                          :stop simulation                                // 
// SET_SPIWRCLK Frequency(Mhz)                                  :set spi frequency for write command            // 
// SET_SPIRDCLK Frequency(Mhz)                                  :set spi frequency for read command             // 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

if (read_mask(0xd8000000, 0x00000003)!=0x0003) {    // Booting mode
    WRITE(0xD800000C, 0x002a8801);  // Do not reset AXI/ARM
    WRITE(0xD8000018, 0x002a8802);  // Do not reset AHB, SD/SD1/SD0
    WRITE(0xD800001C, 0x7fff8804);  // Do not reset APB
    WRITE(0xD8000050, 0x6c000c02);  // Do not reset RISC bus to store the booting info on register
    WRITE(0xD800006C, 0x000a8802);  // Do not reset NOR
} else {                                            // Non Booting mode  
    WRITE(0xD800000C, 0xc02a8801);  // AX2CLK    PLL1_OUT1 / 1 (AX2CLK      324MHz, ACLK 162MHz)
    WRITE(0xD8000018, 0xf02a8802);  // NCLK      PLL1_OUT1 / 2 (AHB/RISC    132MHz)
    WRITE(0xD800001C, 0x00008804);  // WCLK      PLL1_OUT1 / 4 (APB          66MHz)
    WRITE(0xD8000050, 0x00000c02);  // Reset and Enable RISC clock
    WRITE(0xD800006C, 0x800a8802);  // SCLK      PLL1_OUT1 / 2 (SPI         132MHz)
}  

// Reset and enable clock     
WRITE(0xD8000008,0x8002a808);  // BCLK      PLL2_OUT1 / 8 (BIST        99MHz)   
WRITE(0xD8000010,0x80028801);  // MPHYCLK   PLL1_OUT1 / 1 (Memory PHY  264MHz)
WRITE(0xD8000014,0x802aa804);  // MCLK      PLL2_OUT1 / 4 (Memory wrap 198MHz)             
WRITE(0xD8000020,0x0aaaaaaa);  // APB Reset, Enable APB Clock                  
WRITE(0xD8000024,0xc2afa802);  // GCLK      PLL2_OUT1 / 2 (2D         396MHz)             
WRITE(0xD8000028,0xe02ac801);  // DCLK      PLL3_OUT1 / 1 (LCD        166MHz)
WRITE(0xD800002C,0xc02aa804);  // DPCLK     PLL2_OUT1 / 4 (DPCLK      198MHz)  
WRITE(0xD8000030,0xfcaaa804);  // ICLK      PLL2_OUT1 / 4 (VP         198MHz)          
WRITE(0xD8000034,0xcaaaa804);  // XCLK      PLL2_OUT1 / 4 (Video      198MHz)          
WRITE(0xD8000038,0xc02aa804);  // JCLK      PLL2_OUT1 / 4 (JPEG       198MHz)           
WRITE(0xD800003c,0xf0aac804);  // ZCLK      PLL3_OUT1 / 4 (I2S     12.288MHz)
WRITE(0xD8000040,0x0002c802);  // AMCLK     PLL3_OUT1 / 2 (AMCLK   12.288MHz)
WRITE(0xD8000044,0xc00aa804);  // KCLK      PLL2_OUT1 / 4 (MIPI       198MHz)  
WRITE(0xD8000048,0xc002a814);  // KESCCLK   PLL2_OUT1 / 20(MIPI        20MHz)  
WRITE(0xD800004C,0xc002a803);  // KDSICLK   PLL2_OUT1 / 3 (MIPI       264MHz)                        
WRITE(0xD8000054,0x8000000a);  // Reset and Enablle TSI clock        
WRITE(0xD8000058,0x8002a803);  // PCLK      PLL2_OUT1 / 3 (PCR        264MHz)            
WRITE(0xD800005C,0x802aa803);  // WSCLK     PLL2_OUT1 / 3 (WSCLK      264MHz)        
WRITE(0xD8000060,0xc00a880e);  // CAPCLK    PLL1_OUT1 /14 (CAP       25.7MHz)             
WRITE(0xD8000064,0x8000000a);  // Reset and Enable USB clock                   
WRITE(0xD8000068,0xc02ac801);  // REFCLK    PLL3_OUT1 / 1 (MAC         50MHz)  
WRITE(0xD8000070,0x8000000a);  // Reset and Enable UIEnc clock   

// Un-Reset                                                                
WRITE(0xD8000008,0x00002808); // BCLK      PLL2_OUT1 / 8 (BIST        99MHz)                                                             
WRITE(0xD800000C,0x002a8801); // AX2CLK    PLL1_OUT1 / 1 (AX2CLK      264MHz, ACLK 132MHz)                 
WRITE(0xD8000010,0x80028801); // MPHYCLK   PLL1_OUT1 / 1 (Memory PHY  264MHz)  
WRITE(0xD8000014,0x002aa804); // MCLK      PLL2_OUT1 / 4 (Memory wrap 198MHz)   
WRITE(0xD8000018,0x002a8802); // NCLK      PLL1_OUT1 / 2 (AHB/RISC    132MHz)       
WRITE(0xD800001c,0x00008804); // WCLK      PLL1_OUT1 / 4 (APB         66MHz)                
WRITE(0xD8000020,0x0aaaaaaa); // APB Reset, Enable APB Clock                  
WRITE(0xD8000024,0x00002802); // GCLK      PLL2_OUT1 / 2 (2D         396MHz)             
WRITE(0xD8000028,0x00004801); // DCLK      PLL3_OUT1 / 1 (LCD        166MHz)
WRITE(0xD800002C,0x002aa804); // DPCLK     PLL2_OUT1 / 4 (DPCLK      198MHz)  
WRITE(0xD8000030,0x00002804); // ICLK      PLL2_OUT1 / 4 (VP         198MHz)          
WRITE(0xD8000034,0x00002804); // XCLK      PLL2_OUT1 / 4 (Video      198MHz)          
WRITE(0xD8000038,0x00202804); // JCLK      PLL2_OUT1 / 4 (JPEG       198MHz)           
WRITE(0xD800003c,0x00002804); // ZCLK      (No SRCPLL) / 4 (I2S     12.288MHz)
WRITE(0xD8000040,0x00004802); // AMCLK     PLL3_OUT1 / 2 (AMCLK   12.288MHz)
WRITE(0xD8000044,0x00202804); // KCLK      PLL2_OUT1 / 4 (MIPI       198MHz)  
WRITE(0xD8000048,0x00002814); // KESCCLK   PLL2_OUT1 / 20(MIPI        20MHz)                                        
WRITE(0xD800004C,0x00002803); // KDSICLK   PLL2_OUT1 / 3 (MIPI       264MHz)                                              
WRITE(0xD8000050,0x00000c02); // Reset and Enable RISC clock      
WRITE(0xD8000054,0x00000000); // Reset and Enablle TSI clock        
WRITE(0xD8000058,0x00002003); // PCLK      PLL2_OUT1 / 3 (PCR        264MHz)            
WRITE(0xD800005C,0x00002803); // WSCLK     PLL2_OUT1 / 3 (WSCLK      264MHz)        
WRITE(0xD8000060,0x0008000e); // CAPCLK    PLL1_OUT1 / 14(CAP       25.7MHz)            
WRITE(0xD8000064,0x0000000a); // Reset and Enable USB clock                   
WRITE(0xD8000068,0x00004001); // REFCLK    PLL3_OUT1 / 1 (MAC         50MHz)
WRITE(0xD800006C,0x000a8802); // SCLK      PLL1_OUT1 / 2 (SPI        132MHz)            
WRITE(0xD8000070,0x00000000); // Reset and Enable UIEnc clock     

//HX add (depop method)
WRITE(0xD800003c,0x02002804); // ZCLK      (No SRCPLL) / 4 (I2S     12.288MHz)
WRITE(0xD01000D0,0x0000000F); // DAC depop (for DAC faraday)

// Set Host clock to PLL2 temporary, and set it to PLL1_OUT2 latter
//##################################################################################################

//##################################################################################################

/////////////////////////////////////////////////////////
//                                                     //
//         PLL Setting                                 //
//                                                     //
/////////////////////////////////////////////////////////
//#####################################################//
//# PLL1_N1   = 12MHz     * 1/1  * 44  * 1/2 = 264MHz, //
//#####################################################//  
WRITE(0xD8000100,0x202c0201); 
WRITE(0xD8000104,0x80000000); 
WRITE(0xD8000104,0xF3000000); 
WAIT(220); // wait pll stable
WRITE(0xD8000104, 0x80000000); 

//#####################################################//                                     
// PLL2_N1   = 12MHz * 1/1 * 66  * 1/1 = 792MHz
// PLL2_N2   = 12MHz * 1/1 * 56  * 1/2 = 336MHz
//#####################################################// 
WRITE(0xd8000118,0x20380201); 
WRITE(0xd800011c,0x80000000); 
WRITE(0xd800011c,0xF3000000); 
WAIT(220);    
WRITE(0xd800011c,0x80000000);             
WRITE(0xd8000110,0x20420101); 
WRITE(0xd8000114,0x80000000); 
WRITE(0xd8000114,0xF3000000); 
WAIT(220); // wait pll stable
WRITE(0xd8000114,0x80000000);        
            
//#####################################################//             
// PLL3_N1   = 12MHz     * 1/1  * 50  * 1/12 = 50MHz
//#####################################################//
WRITE(0xD8000120,0x20320c01); 
WRITE(0xD8000124,0x80000000); 
WRITE(0xD8000124,0xF3000000); 
WAIT(220); 
WRITE(0xD8000124,0x80000000);

//#####################################################//
// ADPLL2_N1 = 161.28MHz * 1/50 * 196 * 1/56 = 11.2896MHz
// ADPLL2_N2 = 126MHz    * 1/25 * 128 * 1/4  = 161.28MHz
// ADPLL2_N3 = 48MHz     * 1/4  * 42  * 1/4  = 126MHz
//#####################################################//
//WRITE(0xD8000150,0x402a0404);
//WRITE(0xD8000154,0x090f0000);

//WRITE(0xD8000140,0x50800419);
//WRITE(0xD8000144,0x090f0000);
//WRITE(0xD8000130,0xd0c43832);
//WRITE(0xD8000134,0x090f0000);

// After PLL2_N1 enable, change WCLK and NCLK to PLL2_N1
WRITE(0xD8000018,0x002aa804); // NCLK      PLL2_OUT1 / 4 (AHB/RISC    198MHz)       
WRITE(0xD800001c,0x0000a808); // WCLK      PLL2_OUT1 / 8 (APB         99MHz)
WAIT(1);

///////////////////////////////////////////////////                                          
// faraday memory controller initialized process //                                            
///////////////////////////////////////////////////                                       

WRITE(0xd8100350,0x00c50410);  // set ddrphy parameter: w0by2modediven[24]=0,w0vrefddren[23]=1,w0vrefddrsel[22:20]=4,IO15V[18]=1,SIO[17]=0,SELFBIAS[16]=1,VREF_SELECT[10:8]=4,DLLFRANGE[6:4]=1,DDR3[2]=0,LPDDR2[1]=0,MDDR1[0]=0       
WRITE(0xd8100354,0x00000007);  // set ddrphy parameter: BYONE[2]=1,DSRONB[1]=1,CLOCK_EN[0]=1                        
WRITE(0xd8100358,0x00008008);  // set ddrphy parameter: CONUPDATE,DUTYSEL                       


WAIT(1);                       // wait 1 us 
WRITE(0xd8100340,0x00000001);  // release PLLPDN

WAIT(50);                      // wait 50 us
WRITE(0xd8100340,0x00000003);  // release PLLRESETN

WAIT(1);                         // wait 1 us
WRITE(0xd8100340,0x00000007);  // release DLLPDN

WAIT(20);
WRITE(0xD8000010,0x00028801); // MPHYCLK   PLL1_OUT1 / 1 (Memory PHY  264MHz) release memory controller reset


WAIT(10);
WRITE(0xd8100028,0x00001041); // set DDR2/DDR3 PHY pin PMOS/NMOS driving strength register


///////////////////////////////////////////////////
// set memory controller register MRS, AC timing //
// MPHYCLK = 264Mhz, 1Cycle=3.78 ns
///////////////////////////////////////////////////
WRITE(0xd8100000,0x08075d03); // set BYONE[18]=1,DDR_MODE[17:16]=3(DDR2),POST_REF[15:13]=2,auto_refresh_cmd[12:10]=7,DRAM_width[9:8]=1(16-bit),GDS[2:0]=3 
WRITE(0xd8100008,0x00020a52); // set MRS EMRS(driver 60%,DQS# enable,Rtt=disable,WR=6,CL=5(WL=CL-1),BL=4)
WRITE(0xd8100010,0x00000012); // set rank0/rank1 type base address 64M Bytes, Row_bit 13, Col_bit 10, bank_bit 2
WRITE(0xd8100014,0x1c0d100c); // set timing parameter 0(TRFC[31:24]=29(109ns>105ns), TFAW[20:16]=14(52.9ns>50ns), TRC[13:8]=17(64.2ns>60ns), TRAS[4:0]=13(49.1>45ns))
WRITE(0xd8100018,0x22432424); // set timing parameter 1(TWTR[30:28]=3(11.3ns>7.5ns),TRTP[26:24]=3(11.3ns>7.5ns),TWR[23:20]=5(18.9ns>15ns),TMOD[19:16]=4(15.1ns>12ns),TMRD[15:12]=3T>2tck,TRP[11:8]=5(18.9ns>15ns),TRRD[7:4]=3(11.3ns>10ns),TRCD[3:0]=5(18.9ns>15ns))


if (read_mask(0xd8000000, 0x00100000)==0x000000) {  // spec 1950nsx2(ETRON), htrap[4]=0
    WRITE(0xd810001c,0x01003220); // set timing parameter 2(additional delay, TXSR[15:8]=(26x8)=208>200 clock cycle, TREFI[7:0]=(32x32x3.78=3870ns < spec 1950nsx2(ETRON),3900nsx2(ESMT)))
} else {                                            // spec 3900nsx2(ESMT) , htrap[4]=1 
    WRITE(0xd810001c,0x01003240); // set timing parameter 2(additional delay, TXSR[15:8]=(26x8)=208>200 clock cycle, TREFI[7:0]=(64x32x3.78=7741ns < spec 1950nsx2(ETRON),3900nsx2(ESMT))) 
}

WRITE(0xd8100020,0x00008fc0); // set DDR2/DDR3 PHY command and data block register,auto_io_deep_pdn[15]=1, auto_io_ctrl_pdn[7]=1,ODT[2:0]=0(disable)
//WRITE(0xd8100028,0x000007a2); // set DDR2/DDR3 PHY comp block register,use preset DIN and DIP:DIN[12:7]=15,DIP[6:1]=17
//WRITE(0xd8100028,0x00001040); // set DDR2/DDR3 PHY comp block register,use preset DIN and DIP:DIN[12:7]=32,DIP[6:1]=32
WRITE(0xd810002c,0x00401040); // set auto_srf_en=1, auto_srf_timer=64x4 mphyclk, auto_pdn_en=1, auto_pdn_timer=64x4 mphyclk
WRITE(0xd8100030,0x10000004); // set global channel arbiter parameter,RW_Grp_EN[31]=1,Indep_RW_EN[30]=0,group_grant_count_low[28:24]=16,BstOriArb[15:8]=0x0f,Ch_hi_prior[7:0]=0x0E
WRITE(0xd8100034,0x05050502); // set grant count of channel 0 to channel 3
WRITE(0xd8100038,0x05050505); // set grant count of channel 7 to channel 4
WRITE(0xd810003c,0x00030013); // set relationship between wrdata and dqsoe, rddata and rdcmd  // [19:16]=trddata_en, 3 if 1:1, [3:0]=tphy_wrlat, 3 if 1:1
WRITE(0xd8100074,0x22222222); // set dqs filtering window
WRITE(0xd8100078,0x00000088); // set DLSEL_WR_BYTE0=8,DLSEL_WR_BYTE1=8 
WRITE(0xd8100134,0x00307711); // set driving impedance DDRIO, RONMD_DATA[6:4]=1(120),RONMD_CMDADDR[2:0]=1(120)[0->240,1->120,2->80,3,4->60,5->48,6->40,7->34]
///////////////////////////////////////////////////

// change USB priority from 6 to 0 //
WRITE(0xd8100288,0x70654321);

// fire memory controller to initiate memory //
WAIT(100);                     // wait 100 us
WRITE(0xd8100340,0x0000000f);  // release RESETN
WRITE(0xd8100138,0x00000105);  // reset elastic fifo(EFIFO) 
WRITE(0xd8100004,0x00000001);  // fire memory initiated sequence

// Save desired target AX2CLK after maskrom booting. (Reference: 0xD800000C)
WRITE(0xD800027C, 0x002a8801);  // AX2CLK    PLL1_OUT1 / 1 (AX2CLK 264MHz)

// GPIO settings
WRITE(0xD1000044, 0x00000030);
WRITE(0xD1000058, 0xaaaaa8aa);


